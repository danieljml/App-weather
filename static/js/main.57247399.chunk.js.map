{"version":3,"sources":["App.js","index.js"],"names":["convertTimezoneToMinutes","timezone","timezoneInMinutes","moment","utcOffset","format","getCityByIP","clientIP","a","fetch","res","json","data","console","log","city","error","getUserIP","response","ip","api","InputContent","className","type","name","placeholder","Input","memo","App","useState","weatherData","setWeatherData","weather","setWeather","message","alert","setAlert","getUsercity","searchWeatherByCountry","useEffect","handleSubmit","e","preventDefault","form","target","formData","FormData","Object","fromEntries","entries","country","successRequest","setTimeout","reset","status","main","temp","weatherTopSection","Math","round","weatherBottomSection","loading","src","icon","alt","sys","description","map","item","join","pressure","humidity","onSubmit","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57247399.chunk.js","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\nimport moment from 'moment';\r\nimport './index.css';\r\n\r\nconst convertTimezoneToMinutes = timezone => {\r\n  const timezoneInMinutes = timezone / 60;\r\n  const timezoneToMinutes = moment().utcOffset(timezoneInMinutes).format('h:mm A');\r\n  return timezoneToMinutes;\r\n};\r\n\r\nconst getCityByIP = async clientIP => {\r\n  try {\r\n    const res = await fetch(`https://ipinfo.io/${clientIP}?token=f7e68a41baa7e5`);\r\n    const data = await res.json();\r\n    console.log('User IP Address:', data);\r\n    const { city } = data;\r\n    return city;\r\n  } catch (error) {\r\n    console.error('Error fetching city by IP:', error);\r\n  }\r\n};\r\n\r\nconst getUserIP = async () => {\r\n  try {\r\n    const response = await fetch('https://api.ipify.org?format=json');\r\n    const { ip: clientIP } = await response.json();\r\n    return clientIP;\r\n  } catch (error) {\r\n    console.error('Error fetching IP:', error);\r\n  }\r\n};\r\n\r\nconst api = {\r\n  key: '4aa692caf0bf7cf7a224fe81a3ca4959',\r\n  base: 'https://api.openweathermap.org/data/2.5/',\r\n};\r\n\r\nconst InputContent = () => {\r\n  return (\r\n    <>\r\n      <input className=\"form__input\" type=\"text\" name=\"country\" placeholder=\"Search weather by country\" />\r\n      <button type=\"submit\" className=\"form__btn\">\r\n        <BsSearch className=\"btn__icon\" />\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Input = memo(InputContent);\r\n\r\nfunction App() {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [weather, setWeather] = useState('');\r\n  const [alert, setAlert] = useState({ type: '', message: '' });\r\n\r\n  const getUsercity = async () => {\r\n    const ip = await getUserIP();\r\n    const city = await getCityByIP(ip);\r\n    searchWeatherByCountry(city);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsercity();\r\n  }, []);\r\n\r\n  const handlerTimer = () => setTimeout(() => setAlert({ type: '', message: '' }), 2000);\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const formData = new FormData(form);\r\n    const { country } = Object.fromEntries(formData.entries());\r\n\r\n    const successRequest = await searchWeatherByCountry(country);\r\n    if (successRequest) {\r\n      setAlert({ type: 'success', message: 'Success request' });\r\n    } else {\r\n      setAlert({ type: 'error', message: 'Invalid country' });\r\n    }\r\n    handlerTimer();\r\n    form.reset();\r\n  };\r\n\r\n  const searchWeatherByCountry = async country => {\r\n    try {\r\n      const res = await fetch(`${api.base}weather?q=${country}&units=metric&APPID=${api.key}`);\r\n      const data = await res.json();\r\n      if (res.status === 200) {\r\n        if (data.main.temp > 16) {\r\n          setWeather('warm');\r\n        }\r\n        setWeather('cold');\r\n        setWeatherData(data);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const dateBuilder = () => moment().format('LLLL');\r\n\r\n  const weatherTopSection = weatherData ? (\r\n    <>\r\n      <div className={`top__content ${weather}`}>\r\n        <p>{weatherData.weather[0]?.main}</p>\r\n        <span>{Math.round(weatherData.main.temp)}Â°</span>\r\n      </div>\r\n    </>\r\n  ) : (\r\n    ''\r\n  );\r\n\r\n  const weatherBottomSection = weatherData ? (\r\n    <>\r\n      <div className=\"container__image\">\r\n        <img loading=\"lazy\" className={weather} src={`https://openweathermap.org/img/wn/${weatherData.weather[0]?.icon}@2x.png`} alt=\"icon\" />\r\n      </div>\r\n      <p className=\"location\">\r\n        {weatherData.name}, {weatherData.sys.country}\r\n      </p>\r\n      <p className=\"date\">{dateBuilder()}</p>\r\n      <ul>\r\n        <li>\r\n          Description: <span>{weatherData.weather[0].description}</span>\r\n        </li>\r\n        <li>\r\n          Coords:{' '}\r\n          {Object.entries(weatherData['coord'])\r\n            .map(item => {\r\n              return `${item[0]}: ${item[1]}`;\r\n            })\r\n            .join(', ')}\r\n        </li>\r\n        <li>Timezone: {convertTimezoneToMinutes(weatherData.timezone)}</li>\r\n        <li>Pressure: {Math.round(weatherData.main.pressure)}</li>\r\n        <li>Humidity: {Math.round(weatherData.main.humidity)}</li>\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    ''\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className={`alert ${alert.type}`}>\r\n        <p>{alert.message}</p>\r\n      </div>\r\n      <div className={`container__app ${weather}`}>\r\n        <main className={`app ${weather}`}>\r\n          <div className=\"container__top\">\r\n            <header className=\"block\">\r\n              <form onSubmit={handleSubmit} id=\"form-country\" className=\"form-weather\">\r\n                <Input />\r\n              </form>\r\n            </header>\r\n            {weatherTopSection}\r\n          </div>\r\n          <div className={`container__bottom ${weather}`}>{weatherBottomSection}</div>\r\n        </main>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}