{"version":3,"sources":["App.js","index.js"],"names":["convertTimezoneToMinutes","timezone","timezoneInMinutes","moment","utcOffset","format","api","App","useState","weatherData","setWeatherData","weather","setWeather","type","message","alert","setAlert","searchWeatherByCountry","country","a","fetch","res","json","data","status","main","temp","console","log","setTimeout","weatherTopSection","loading","className","src","alt","Math","round","weatherBottomSection","icon","name","sys","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","description","Object","entries","map","item","join","pressure","humidity","onSubmit","e","preventDefault","form","target","formData","FormData","fromEntries","reset","id","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.514b2d78.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { BsSearch } from 'react-icons/bs';\r\nimport './index.css';\r\n\r\nconst convertTimezoneToMinutes = timezone => {\r\n  const timezoneInMinutes = timezone / 60;\r\n  const timezoneToMinutes = moment().utcOffset(timezoneInMinutes).format('h:mm A');\r\n  return timezoneToMinutes;\r\n};\r\n\r\nconst api = {\r\n  key: '4aa692caf0bf7cf7a224fe81a3ca4959',\r\n  base: 'https://api.openweathermap.org/data/2.5/',\r\n};\r\n\r\nfunction App() {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [weather, setWeather] = useState('');\r\n  const [alert, setAlert] = useState({ type: '', message: '' });\r\n\r\n  const handlerTimer = () => setTimeout(() => setAlert({ type: '', message: '' }), 3000);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const formData = new FormData(form);\r\n    const { country } = Object.fromEntries(formData.entries());\r\n    searchWeatherByCountry(country);\r\n    form.reset();\r\n  };\r\n\r\n  const searchWeatherByCountry = async country => {\r\n    try {\r\n      const res = await fetch(`${api.base}weather?q=${country}&units=metric&APPID=${api.key}`);\r\n      const data = await res.json();\r\n      if (res.status === 200) {\r\n        setWeatherData(data);\r\n        setAlert({ type: 'success', message: 'Success request' });\r\n        if (data.main.temp > 16) {\r\n          setWeather('warm');\r\n          return;\r\n        }\r\n        setWeather('cold');\r\n      } else {\r\n        setAlert({ type: 'error', message: 'Invalid country' });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      handlerTimer();\r\n    }\r\n  };\r\n\r\n  const dateBuilder = d => {\r\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n\r\n    let days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n    return `${day} ${date} ${month} ${year}`;\r\n  };\r\n\r\n  const weatherTopSection = weatherData ? (\r\n    <>\r\n      <img\r\n        loading=\"lazy\"\r\n        className=\"top__image\"\r\n        src={weather === 'warm' ? 'https://i.imgur.com/Cf7kgE8.png' : 'https://i.imgur.com/iLDHBSD.png'}\r\n        alt=\"img-weather\"\r\n      />\r\n      <div className=\"top__content\">\r\n        <p>{weatherData.weather[0]?.main}</p>\r\n        <span>{Math.round(weatherData.main.temp)}Â°</span>\r\n      </div>\r\n    </>\r\n  ) : (\r\n    ''\r\n  );\r\n\r\n  const weatherBottomSection = weatherData ? (\r\n    <>\r\n      <div className=\"container__image\">\r\n        <img loading=\"lazy\" className={weather} src={`https://openweathermap.org/img/wn/${weatherData.weather[0]?.icon}@2x.png`} alt=\"icon\" />\r\n      </div>\r\n      <p className=\"location\">\r\n        {weatherData.name}, {weatherData.sys.country}\r\n      </p>\r\n      <p className=\"date\">{dateBuilder(new Date())}</p>\r\n      <ul>\r\n        <li>\r\n          Description: <span>{weatherData.weather[0].description}</span>\r\n        </li>\r\n        <li>\r\n          Coords:{' '}\r\n          {Object.entries(weatherData['coord'])\r\n            .map(item => {\r\n              return `${item[0]}: ${item[1]}`;\r\n            })\r\n            .join(', ')}\r\n        </li>\r\n        <li>Timezone: {convertTimezoneToMinutes(weatherData.timezone)}</li>\r\n        <li>Pressure: {Math.round(weatherData.main.pressure)}</li>\r\n        <li>Humidity: {Math.round(weatherData.main.humidity)}</li>\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    ''\r\n  );\r\n\r\n  return (\r\n    <div className={`container__app ${weather}`}>\r\n      <div className={`alert ${alert.type}`}>\r\n        <p>{alert.message}</p>\r\n      </div>\r\n      <main className=\"app\">\r\n        <div className=\"container__top\">\r\n          <header className=\"block\">\r\n            <form onSubmit={handleSubmit} id=\"form-country\" className=\"form-weather\">\r\n              <input className=\"form__input\" type=\"text\" name=\"country\" placeholder=\"Search weather by country\" />\r\n              <button type=\"submit\" className=\"form__btn\">\r\n                <BsSearch className=\"btn__icon\" />\r\n              </button>\r\n            </form>\r\n          </header>\r\n          {weatherTopSection}\r\n        </div>\r\n        <div className={`container__bottom ${weather}`}>{weatherBottomSection}</div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}